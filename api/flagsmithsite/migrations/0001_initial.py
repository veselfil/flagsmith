# Generated by Django 2.2.24 on 2021-10-06 05:27

from django.conf import settings
from django.db import migrations, DEFAULT_DB_ALIAS, connections, router
from django.core.management.color import no_style
from environs import Env
env = Env()

def update_django_sites(apps, schema_editor):
    try:
        Site = apps.get_model('sites', 'Site')
    except LookupError:
        return

    FRONTEND_DOMAIN = env("FRONTEND_DOMAIN", default=None)
    if not FRONTEND_DOMAIN:
        raise Exception("Environment variable 'FRONTEND_DOMAIN' does not exist. Cannot update site configuration.")

    using = DEFAULT_DB_ALIAS

    if not Site.objects.using(using).exists():
        print("Creating new Site object for flagsmith.")
        Site(pk=getattr(settings, 'SITE_ID', 1), domain=FRONTEND_DOMAIN, name=FRONTEND_DOMAIN).save(using=using)

        # We set an explicit pk instead of relying on auto-incrementation,
        # so we need to reset the database sequence. See #17415.
        sequence_sql = connections[using].ops.sequence_reset_sql(no_style(), [Site])
        if sequence_sql:
            print("Resetting sequence")
            with connections[using].cursor() as cursor:
                for command in sequence_sql:
                    cursor.execute(command)
    else:
        print("Updating example.com Site object to correct domain value.")

        ExampleSite = Site.objects.get(pk=1)
        ExampleSite.domain = FRONTEND_DOMAIN
        ExampleSite.name = FRONTEND_DOMAIN
        ExampleSite.save(using=using)

class Migration(migrations.Migration):

    dependencies = [
        ('sites', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(update_django_sites),
    ]
